// Dynamically provided variables
String mapDefId = "99";  // Example value for mapDefId
String masterId = "12";  // Example value for masterId
List<String> selectionAttributes = Arrays.asList("cdsid", "mpsid");  // Example selection attributes (could be dynamic)
List<String> groupingAttributes = Arrays.asList("line1", "line2");  // Example grouping attributes (could be dynamic)

List<Bson> aggregationPipeline = Arrays.asList(
    // Match documents based on mapDefId and masterId in Collection 1
    Aggregates.match(Filters.and(
        Filters.eq("mapDefId", mapDefId),
        Filters.eq("masterId", masterId)
    )),
    
    // Unwind delta.input array to flatten the values in delta object
    Aggregates.unwind("$delta.input", true),
    
    // Unwind snapshot.input array to flatten the values in snapshot object
    Aggregates.unwind("$snapshot.input", true),
    
    // Add fields for dynamic selection and grouping attributes
    Aggregates.addFields(
        // For each selection attribute, try to pick the value from delta first and then snapshot
        selectionAttributes.stream().map(attr -> {
            return new Field<>(attr, Filters.or(
                Filters.eq("delta.input.name", attr), 
                Filters.eq("snapshot.input.name", attr)
            ));
        }).toArray(Field[]::new)
    ),
    
    // Perform the lookup to join with Collection 2 based on seq and mapDefId
    Aggregates.lookup(
        "collection2",  // Collection 2 name
        Arrays.asList("seq", "mapDefId"),  // Local fields from Collection 1
        Arrays.asList("seq", "mapDefId"),  // Foreign fields from Collection 2
        "joined_docs"    // Name of the new field to store the joined documents
    ),
    
    // Unwind the joined documents from Collection 2
    Aggregates.unwind("$joined_docs", true),
    
    // Group by the dynamic grouping attributes
    Aggregates.group(
        // Group by dynamic attributes
        new Document(groupingAttributes.stream()
            .collect(Collectors.toMap(
                attribute -> attribute, 
                attribute -> "$" + attribute
            ))
        ), 
        // Collect distinct values for dynamic grouping attributes
        Accumulators.addToSet("groupingAttributesValues", "$$ROOT")
    ),
    
    // Match to filter groups with more than 3 distinct line values
    Aggregates.match(Filters.gt(new Document("groupingAttributesValues", new Document("$size", 3))))
);
