// Step 1: Get the array of _id values
const idsToDelete = db.collectionB.aggregate([
  {
    $lookup: {
      from: "collectionA",
      let: { mapDefIdStr: "$context.mapDefId" },
      pipeline: [
        { $addFields: { mapDefIdStr: { $toString: "$mapDefId" } } },
        { $match: { $expr: { $eq: ["$$mapDefIdStr", "$mapDefIdStr"] } } }
      ],
      as: "matched_docs"
    }
  },
  { $unwind: "$matched_docs" },
  {
    $match: {
      $expr: {
        $and: [
          { $ne: ["$context.ruleDefId", { $toString: "$matched_docs._id" }] },
          { $eq: ["$context.mapDefId", "$matched_docs.mapDefIdStr"] }
        ]
      }
    }
  },
  {
    $group: {
      _id: null,
      ids: { $push: "$_id" }
    }
  },
  { $project: { _id: 0, ids: 1 } }
]).toArray()[0].ids;

// Step 2: Delete documents using the ids
db.collectionB.deleteMany({
  _id: { $in: idsToDelete }
});
