import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import org.bson.Document;
import org.bson.conversions.Bson;

import java.util.Arrays;
import java.util.List;

MongoCollection<Document> collection = database.getCollection("your_collection_name");

// Dynamic list of selection attributes (like cdsid, mpsid)
List<String> selectionAttributes = Arrays.asList("cdsid", "mpsid"); // Replace with dynamic list

// Dynamic list of grouping attributes (like line1, line2)
List<String> groupingAttributes = Arrays.asList("line1", "line2"); // Replace with dynamic list

// Create the aggregation pipeline
List<Bson> pipeline = Arrays.asList(
    // Unwind the delta.input array
    Aggregates.unwind("$delta.input"),
    
    // Match only the relevant selection attributes (cdsid, mpsid)
    Aggregates.match(Filters.in("delta.input.name", selectionAttributes)),
    
    // Group by the combination of selection attributes (cdsid, mpsid) and collect the line1, line2 values
    Aggregates.group(
        new Document("cdsid", new Document("$first", 
            new Document("$cond", Arrays.asList(
                new Document("$eq", Arrays.asList("$delta.input.name", "cdsid")), 
                "$delta.input.value", null))))
        ).append("mpsid", new Document("$first", 
            new Document("$cond", Arrays.asList(
                new Document("$eq", Arrays.asList("$delta.input.name", "mpsid")), 
                "$delta.input.value", null)))),
        
        // Dynamically collect line1, line2 values into lineValues array
        new Document("lineValues", new Document("$push", 
            new Document("$cond", Arrays.asList(
                new Document("$in", Arrays.asList("$delta.input.name", groupingAttributes)),
                new Document("$split", Arrays.asList("$delta.input.value", ";")),
                Arrays.asList()))))),

    // Project to get the union of line1 and line2 values, ensuring unique values
    Aggregates.project(new Document("cdsid", "$_id.cdsid")
        .append("mpsid", "$_id.mpsid")
        .append("lineValues", new Document("$reduce", new Document("input", "$lineValues")
            .append("initialValue", Arrays.asList())
            .append("in", new Document("$setUnion", Arrays.asList("$$value", "$$this")))))),

    // Match only those records where the number of distinct lineValues > 3
    Aggregates.match(Filters.expr(new Document("$gt", Arrays.asList(
        new Document("$size", "$lineValues"), 3))))
);

// Execute the aggregation query
AggregateIterable<Document> result = collection.aggregate(pipeline);

// Iterate over the result and process documents
for (Document doc : result) {
    System.out.println(doc.toJson());
}
