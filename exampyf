import org.springframework.web.multipart.MultipartFile;

import java.io.*;

public class FileBackedMultipartFile implements MultipartFile {
    private final String name;
    private final String originalFilename;
    private final String contentType;
    private final File file;

    public FileBackedMultipartFile(MultipartFile delegate, File targetFile) throws IOException {
        this.name = delegate.getName();
        this.originalFilename = delegate.getOriginalFilename();
        this.contentType = delegate.getContentType();
        this.file = targetFile;

        // Save immediately so Tomcat cleanup won't affect us
        delegate.transferTo(targetFile);
    }

    @Override
    public String getName() { return name; }

    @Override
    public String getOriginalFilename() { return originalFilename; }

    @Override
    public String getContentType() { return contentType; }

    @Override
    public boolean isEmpty() { return file.length() == 0; }

    @Override
    public long getSize() { return file.length(); }

    @Override
    public byte[] getBytes() throws IOException {
        return java.nio.file.Files.readAllBytes(file.toPath());
    }

    @Override
    public InputStream getInputStream() throws IOException {
        return new FileInputStream(file);
    }

    @Override
    public void transferTo(File dest) throws IOException {
        java.nio.file.Files.copy(file.toPath(), dest.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
    }

    public File getStoredFile() { return file; }
}




//////


if (file.isEmpty()) {
        return ResponseEntity.badRequest().body("File is empty");
    }

    // Persist to your own storage immediately
    File permanent = new File("/var/uploads/" + file.getOriginalFilename());
    FileBackedMultipartFile safeFile = new FileBackedMultipartFile(file, permanent);
