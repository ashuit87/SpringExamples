package com.example.config;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.config.PropertiesFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportResource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

@Configuration
@ImportResource({
    "classpath:dao.xml",
    "classpath:scheduler.xml",
    "classpath:other-config.xml"
})
public class AppConfig {

    /**
     * Loads properties into Spring's placeholder resolution system.
     */
    @Bean
    public static PropertySourcesPlaceholderConfigurer propertyConfigurer() {
        PropertySourcesPlaceholderConfigurer configurer = new PropertySourcesPlaceholderConfigurer();
        configurer.setLocations(propertyResources());
        configurer.setIgnoreResourceNotFound(false);
        configurer.setIgnoreUnresolvablePlaceholders(false);
        return configurer;
    }

    /**
     * This replaces ListFactoryBean â€” returns a list of Resources
     * that other beans (like PropertiesFactoryBean) can use.
     */
    @Bean
    public static Resource[] propertyResources() {
        String env = System.getProperty("ENV", "dev");
        return new Resource[] {
            new ClassPathResource("application.properties"),
            new ClassPathResource("db.properties"),
            new ClassPathResource("mail.properties"),
            new ClassPathResource(env + "_SM.properties")
        };
    }

    /**
     * This replaces your old PropertiesFactoryBean, merging multiple
     * .properties files into a single Properties object.
     */
    @Bean
    public static PropertiesFactoryBean applicationProperties() {
        PropertiesFactoryBean factory = new PropertiesFactoryBean();
        factory.setLocations(propertyResources());
        return factory;
    }
}
