Step-by-step guide to gracefully stop Spring @Scheduled jobs in OpenShift
1. Enable graceful shutdown in Spring Boot
Spring Boot 2.3+ supports graceful shutdown out of the box.
In your application.yml or application.properties:

server:
  shutdown: graceful
spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s

This ensures that when the container receives SIGTERM, Spring:
Stops accepting new requests.
Waits for running tasks (including scheduled ones) to complete up to the timeout.
Then shuts down the context.

2. Implement SmartLifecycle or DisposableBean (optional but cleaner)

If you have a long-running scheduled job, you can handle shutdown manually to make sure it stops gracefully.

import org.springframework.stereotype.Component;

import jakarta.annotation.PreDestroy;
import java.util.concurrent.atomic.AtomicBoolean;

@Component
public class MyScheduledJob {

    private final AtomicBoolean running = new AtomicBoolean(true);

    @org.springframework.scheduling.annotation.Scheduled(fixedDelay = 10000)
    public void execute() {
        if (!running.get()) {
            return;
        }
        System.out.println("Job started...");
        try {
            // Simulate work
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        System.out.println("Job finished...");
    }

    @PreDestroy
    public void onShutdown() {
        System.out.println("Shutdown signal received. Stopping job...");
        running.set(false);
    }
}

@PreDestroy runs when the application context is shutting down (after SIGTERM),
so your scheduled job loop stops cleanly.

3. Configure OpenShift deployment for graceful termination
In your OpenShift (or Kubernetes) deployment YAML, set:

spec:
  template:
    spec:
      terminationGracePeriodSeconds: 60  # give enough time for cleanup

This ensures that when the pod is stopped, OpenShift:
Sends a SIGTERM.
Waits up to 60 seconds before killing the pod.

