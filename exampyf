const BATCH_SIZE = 500;
let skip = 0;
let batch = [];

while (true) {
  batch = db.automation
    .find({}, { _id: 1 }) // only fetch _id
    .skip(skip)
    .limit(BATCH_SIZE)
    .toArray();

  if (batch.length === 0) break;

  const batchIds = batch.map(doc => doc._id);

  // Find which of those exist in masterId collection
  const foundDocs = db.masterId.find(
  { _id: { $in: batchIds } },
  { _id: 1 }
).toArray(); // ✅ convert cursor to array

// 🔐 Convert to Set of strings
  const existingIds = new Set(foundDocs.map(doc => doc._id + ''));

  // 🔍 Match using string representation of _id
  const missingIds = batchIds.filter(id => !existingIds.has(id + ''));

  if (missingIds.length > 0) {
    // Update all missing IDs in automation
    db.automation.updateMany(
      { _id: { $in: missingIds } },
      {
        $set: {
          status: "FAILED",
          message: "failed due to not present"
        }
      }
    );
  }

  print(`Processed batch of ${batch.length}, updated ${missingIds.length} documents.`);

  skip += BATCH_SIZE;
}
