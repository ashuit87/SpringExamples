const BATCH_SIZE = 500;
let lastId = null;

while (true) {
  const query = lastId ? { _id: { $gt: lastId } } : {};
  
  const batch = db.automation
    .find(query, { _id: 1 })
    .sort({ _id: 1 }) // Ensure order
    .limit(BATCH_SIZE)
    .toArray();

  if (batch.length === 0) break;

  const batchIds = batch.map(doc => doc._id);

  const foundDocs = db.masterId
    .find({ _id: { $in: batchIds } }, { _id: 1 })
    .toArray();

  const existingIds = new Set(foundDocs.map(doc => doc._id + ''));

  const missingIds = batchIds.filter(id => !existingIds.has(id + ''));

  if (missingIds.length > 0) {
    db.automation.updateMany(
      { _id: { $in: missingIds } },
      {
        $set: {
          status: "FAILED",
          message: "failed due to not present"
        }
      }
    );
  }

  print(`Processed ${batch.length}, updated ${missingIds.length} as FAILED`);

  // Update lastId for next batch
  lastId = batch[batch.length - 1]._id;
}
