const BATCH_SIZE = 500;

const sourceMasterCollection = db.dbsync_queue;
const sourceDataCollection = db.rule_inst_change;
const targetDataCollection = db.rule_inst_change_history;
const auditProcessCollection = db.automation_log_cleanup_queue;

let lastId = null;

while (true) {
  let query = { status: "COMPLETED" };
  if (lastId !== null) {
    query._id = { $gt: lastId };
  }

  const masterIdBatch = sourceMasterCollection
    .find(query)
    .sort({ _id: 1 })
    .limit(BATCH_SIZE)
    .project({ masterRequestId: 1 })
    .toArray();

  if (!masterIdBatch || masterIdBatch.length === 0) {
    print("No more batches to process. Done.");
    console.log("No more batches to process. Done.");
    break;
  }

  lastId = masterIdBatch[masterIdBatch.length - 1]._id;

  const masterRequestIds = masterIdBatch
    .map(doc => doc.masterRequestId)
    .filter(id => id !== null && id !== undefined)
    .map(id => NumberLong(id));

  if (masterRequestIds.length === 0) {
    print("Skipping batch: all masterRequestIds were null/undefined.");
    console.log("Skipping batch: all masterRequestIds were null/undefined.");
    continue;
  }

  const docsToMove = sourceDataCollection
    .find({ masterId: { $in: masterRequestIds } })
    .toArray();

  if (!docsToMove || docsToMove.length === 0) {
    print(`No documents found in rule_inst_change for ${masterRequestIds.length} masterRequestIds.`);
    console.log(`No documents found in rule_inst_change for ${masterRequestIds.length} masterRequestIds.`);
    continue;
  }

  try {
    const insertResult = targetDataCollection.insertMany(docsToMove);

    if (insertResult.insertedCount === docsToMove.length) {
      const deleteResult = sourceDataCollection.deleteMany({ masterId: { $in: masterRequestIds } });

      masterRequestIds.forEach(masterRequestId => {
        auditProcessCollection.updateOne(
          { _id: masterRequestId },
          { $set: { status: "COMPLETED" } }
        );
      });

      const movedMasterIds = [...new Set(docsToMove.map(doc => doc.masterId))];

      print(`Inserted/Deleted documents for masterIds: ${movedMasterIds.join(", ")}`);
      console.log(`Inserted/Deleted documents for masterIds: ${movedMasterIds.join(", ")}`);

      print(`Batch complete. Moved: ${docsToMove.length}, Deleted: ${deleteResult.deletedCount}, Status updated.`);
      console.log(`Batch complete. Moved: ${docsToMove.length}, Deleted: ${deleteResult.deletedCount}, Status updated.`);
    } else {
      print(`Partial insert: ${insertResult.insertedCount}/${docsToMove.length}. Skipping delete and audit update.`);
      console.log(`Partial insert: ${insertResult.insertedCount}/${docsToMove.length}. Skipping delete and audit update.`);
    }
  } catch (e) {
    print(`Error during insert: ${e}`);
    console.log(` Error during insert: ${e}`);
    print(" Skipping delete and audit update to avoid data loss.");
    console.log("Skipping delete and audit update to avoid data loss.");
  }
}
