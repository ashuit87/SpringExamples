<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

<!-- Prometheus export if you need Grafana -->
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-registry-prometheus</artifactId>
</dependency>


import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import java.util.concurrent.TimeUnit;

@Aspect
@Component
public class MicrometerMetricsAspect {

    private final MeterRegistry registry;

    public MicrometerMetricsAspect(MeterRegistry registry) {
        this.registry = registry;
    }

    @Around("execution(* com.example..service..*(..))")
    public Object monitor(ProceedingJoinPoint pjp) throws Throwable {
        String className = pjp.getTarget().getClass().getSimpleName();
        String methodName = pjp.getSignature().getName();

        String latencyMetric = "service.latency";
        String errorMetric = "service.errors";

        long start = System.nanoTime();
        try {
            return pjp.proceed();
        } catch (Exception e) {
            registry.counter(errorMetric,
                    "service", className,
                    "method", methodName
            ).increment();
            throw e;
        } finally {
            long duration = System.nanoTime() - start;
            Timer.builder(latencyMetric)
                    .tags("service", className, "method", methodName)
                    .register(registry)
                    .record(duration, TimeUnit.NANOSECONDS);
        }
    }
}




import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.stereotype.Component;

import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;

@Component
public class DeadlockHealthIndicator implements HealthIndicator {

    @Override
    public Health health() {
        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
        long[] deadlockedThreads = threadMXBean.findDeadlockedThreads();

        if (deadlockedThreads != null && deadlockedThreads.length > 0) {
            return Health.down()
                    .withDetail("deadlocks", deadlockedThreads.length)
                    .build();
        }
        return Health.up().withDetail("deadlocks", "none").build();
    }
}



management.endpoints.web.exposure.include=health,metrics,prometheus
management.endpoint.health.show-details=always


/actuator/health

GET /actuator/metrics/service.latency

GET /actuator/metrics/service.errors

GET /actuator/metrics/jvm.memory.used

GET /actuator/metrics/system.cpu.usage

GET /actuator/metrics/jvm.threads.liv
